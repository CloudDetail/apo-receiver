// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.21.9
// source: apo_agent_monitor_server.proto

package model

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	AgentMonitorService_SendAgentMonitorMetric_FullMethodName = "/kindling.AgentMonitorService/SendAgentMonitorMetric"
)

// AgentMonitorServiceClient is the client API for AgentMonitorService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AgentMonitorServiceClient interface {
	SendAgentMonitorMetric(ctx context.Context, in *AgentMonitorRequest, opts ...grpc.CallOption) (*AgentMonitorResponse, error)
}

type agentMonitorServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewAgentMonitorServiceClient(cc grpc.ClientConnInterface) AgentMonitorServiceClient {
	return &agentMonitorServiceClient{cc}
}

func (c *agentMonitorServiceClient) SendAgentMonitorMetric(ctx context.Context, in *AgentMonitorRequest, opts ...grpc.CallOption) (*AgentMonitorResponse, error) {
	out := new(AgentMonitorResponse)
	err := c.cc.Invoke(ctx, AgentMonitorService_SendAgentMonitorMetric_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AgentMonitorServiceServer is the server API for AgentMonitorService service.
// All implementations must embed UnimplementedAgentMonitorServiceServer
// for forward compatibility
type AgentMonitorServiceServer interface {
	SendAgentMonitorMetric(context.Context, *AgentMonitorRequest) (*AgentMonitorResponse, error)
	mustEmbedUnimplementedAgentMonitorServiceServer()
}

// UnimplementedAgentMonitorServiceServer must be embedded to have forward compatible implementations.
type UnimplementedAgentMonitorServiceServer struct {
}

func (UnimplementedAgentMonitorServiceServer) SendAgentMonitorMetric(context.Context, *AgentMonitorRequest) (*AgentMonitorResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendAgentMonitorMetric not implemented")
}
func (UnimplementedAgentMonitorServiceServer) mustEmbedUnimplementedAgentMonitorServiceServer() {}

// UnsafeAgentMonitorServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AgentMonitorServiceServer will
// result in compilation errors.
type UnsafeAgentMonitorServiceServer interface {
	mustEmbedUnimplementedAgentMonitorServiceServer()
}

func RegisterAgentMonitorServiceServer(s grpc.ServiceRegistrar, srv AgentMonitorServiceServer) {
	s.RegisterService(&AgentMonitorService_ServiceDesc, srv)
}

func _AgentMonitorService_SendAgentMonitorMetric_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AgentMonitorRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AgentMonitorServiceServer).SendAgentMonitorMetric(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AgentMonitorService_SendAgentMonitorMetric_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AgentMonitorServiceServer).SendAgentMonitorMetric(ctx, req.(*AgentMonitorRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// AgentMonitorService_ServiceDesc is the grpc.ServiceDesc for AgentMonitorService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var AgentMonitorService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "kindling.AgentMonitorService",
	HandlerType: (*AgentMonitorServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SendAgentMonitorMetric",
			Handler:    _AgentMonitorService_SendAgentMonitorMetric_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "apo_agent_monitor_server.proto",
}
